<!-- BidModal.razor -->
@using Microsoft.AspNetCore.Authorization
@using SubastaMaestra.Models.DTOs.Bid
@using SubastaMaestra.Entities.Enums
@using CurrieTechnologies.Razor.SweetAlert2
@inject SweetAlertService Swal;
@attribute [Authorize]
@inject AuthenticationService authService
@inject IBidService BidService
@inject NavigationManager NavManager

<style>
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* Fondo semitransparente */
        z-index: 1050;
        overflow-x: hidden;
        overflow-y: auto;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Centrar el modal vertical y horizontalmente */
    .modal-dialog {
        max-width: 500px;
        width: 100%;
        margin: auto;
    }

    /* Estilo del contenido del modal */
    .modal-content {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        overflow: hidden;
    }

    /* Header del modal */
    .modal-header {
        background-color: #8901CF; /* Azul primario */
        color: white;
        padding: 15px 20px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

        .modal-header h5 {
            margin: 0;
            font-size: 1.25rem;
        }

        .modal-header button {
            background: none;
            border: none;
            font-size: 1.5rem;
            color: white;
            cursor: pointer;
        }

    /* Body del modal */
    .modal-body {
        padding: 20px;
    }

        .modal-body .form-group {
            margin-bottom: 15px;
        }

        .modal-body label {
            font-weight: bold;
            display: block;
            margin-bottom: 5px;
        }

        .modal-body .form-control {
            border: 1px solid #ced4da;
            border-radius: 5px;
            padding: 10px;
            font-size: 1rem;
        }

    /* Footer del modal */
    .modal-footer {
        padding: 15px 20px;
        display: flex;
        justify-content: flex-end;
        background-color: #f8f9fa;
        border-top: 1px solid #e9ecef;
    }

        .modal-footer button {
            margin-left: 10px;
            padding: 10px 20px;
            font-size: 1rem;
            border-radius: 5px;
            border: none;
            cursor: pointer;
            transition: background-color 0.2s ease-in-out;
        }

            .modal-footer button:first-child {
                background-color: red;
                color: white;
            }

                .modal-footer button:first-child:hover {
                    background-color: #5a6268;
                }

            .modal-footer button:last-child {
                background-color: #8901CF;
                color: white;
            }

                .modal-footer button:last-child:hover {
                    background-color: #0056b3;
                }
</style>

<div class="modal show" tabindex="-1" style="display: block;" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Realizar Oferta</h5>
                <button type="button"  @onclick="(() => OnClose.InvokeAsync(false))">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Monto de la oferta</label>
                    <InputNumber @bind-Value="bid.Amount" class="form-control" placeholder="Ej. 500" />
                </div>

                <div class="form-group">
                    <label>Método de pago</label>
                    <InputSelect id="deliveryCondition" class="form-control form-control-sm" @bind-Value="bid.PaymentMethods">
                        <option value="">Selecciona una opción</option>
                        @foreach (var condition in Enum.GetValues(typeof(PaymentMethods)))
                        {
                            <option value="@condition">@condition</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" @onclick="(() => OnClose.InvokeAsync(false))">Cancelar</button>
                <button type="button"  @onclick="SubmitBid" disabled="@IsSubmitting">Ofertar</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int ProductId { get; set; }
    [Parameter] public EventCallback OnBidPlaced { get; set; }
    [Parameter] public EventCallback<bool> OnClose { get; set; }

    private BidCreateDTO bid = new();
    private string userId;
    private bool IsSubmitting;

    protected override async Task OnInitializedAsync()
    {
        // Obtener el token del localStorage
        var token = await authService.GetTokenAsync();

        // Redirigir si no está autenticado
        if (string.IsNullOrWhiteSpace(token) || authService.IsTokenExpired(token))
        {
            var currentUrl = NavManager.ToBaseRelativePath(NavManager.Uri);
            NavManager.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(currentUrl)}");
        }

        userId = await authService.GetUserId();
    }

    string Message = string.Empty;
    (bool succes, string message) response;

    private async Task SubmitBid()
    {
        if (userId == null)
        {
            Message = "Usuario no autenticado.";
            return;
        }

        IsSubmitting = true;
        bid.ProductId = ProductId;
        bid.BidderId = int.Parse(userId);

        var (success, message) = await BidService.CreateBid(bid);

        if (success)
        {
            Message = null;
            await OnBidPlaced.InvokeAsync();
            await OnClose.InvokeAsync(true);
            await Swal.FireAsync("Éxito", "Oferta realizada exitosamente.", "success");
        }
        else
        {
            Message = message;
            await Swal.FireAsync("Error", message);
        }

        IsSubmitting = false;
    }

}
