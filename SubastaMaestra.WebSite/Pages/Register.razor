@page "/registro"
@using SubastaMaestra.Models.DTOs.User
@using SubastaMaestra.Entities.Enums
@inject IUserService _userService
@inject NavigationManager Navigation

<h2 class="text-center mt-4">Registro</h2>
<div class="d-flex justify-content-center align-items-center min-vh-100">
    <div class="card shadow-lg p-4" style="width: 22rem;">
                <EditForm Model="@user" OnValidSubmit="OnSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="name" class="form-label">Nombre Completo</label>
                        <InputText id="name" class="form-control" @bind-Value="user.Name" required />
                    </div>

                    <div class="mb-3">
                        <label for="documentType" class="form-label">Tipo de Documento</label>
                        <InputSelect id="documentType" class="form-control" @bind-Value="user.DocumentType" required>
                            <option value="">Selecciona una opción</option>
                            @foreach (var docType in Enum.GetValues(typeof(DocumType)))
                            {
                                <option value="@docType">@docType</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label for="documentNumber" class="form-label">Número de Documento</label>
                        <InputText id="documentNumber" class="form-control" @bind-Value="user.DocumentNumber" required />
                    </div>

                    <div class="mb-3">
                        <label for="phoneNumber" class="form-label">Número de Teléfono</label>
                        <InputText id="phoneNumber" class="form-control" @bind-Value="user.PhoneNumber" />
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Correo Electrónico</label>
                        <InputText id="email" type="email" class="form-control" @bind-Value="user.Email" required />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Contraseña</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="user.Password" required />
                    </div>

                    <div class="mb-3">
                        <label for="personType" class="form-label">Tipo de Persona</label>
                        <InputSelect id="personType" class="form-control" @bind-Value="user.PersonType" required>
                            <option value="">Selecciona una opción</option>
                            @foreach (var personType in Enum.GetValues(typeof(PersonType)))
                            {
                                <option value="@personType">@personType</option>
                            }
                        </InputSelect>
                    </div>

            <div class="form-group mb-3">
                Ya estas registrado?,
                <NavLink href="login">
                    <i class="bi bi-pencil-square me-1"></i> Inicia Sesión
                </NavLink>
            </div>

                    <button type="submit" class="btn btn-primary w-100 mt-3">Registrarse</button>
                </EditForm>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">@errorMessage</div>
                }
    </div>
</div>

@code {
    private UserCreateDTO user = new UserCreateDTO();
    private string errorMessage = string.Empty;

    private async Task OnSubmit()
    {
        try
        {
            var result = await _userService.Register(user);

            if (result?.Success == true)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {
                errorMessage = "Error en el registro. Inténtelo nuevamente.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }
}
